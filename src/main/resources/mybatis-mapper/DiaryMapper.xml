<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.teamY.angryBox.mapper.DiaryMapper">

    <!--    angryPhaseId 유효성검사 -->
    <select id="checkAngryId" resultType="int">
        SELECT COUNT(*)
        FROM angry_phase
        WHERE id = #{angryPhaseId}
    </select>
    <!--    다이어리 작성자 확인 -->
    <select id="selectDiaryMemberId" resultType="int">
        SELECT member_id
        FROM diary
        WHERE id = #{diaryId}
    </select>

    <!--    다이어리에 해당 파일 있는지 확인-->
    <select id="checkFileInDiary" resultType="int">
        SELECT COUNT(*)
        FROM diary_file
        WHERE diary_id = #{diaryId} AND file_id = #{fileId}
    </select>
    <!--    전체 게시글 마지막 id 조회 -->
    <select id="selectLastId" resultType="int">
        SELECT id
        FROM diary
        where is_public = 1
        ORDER BY id DESC
        LIMIT 1
    </select>

    <!--    저금통별 마지막 id 조회 -->
    <select id="selectLastIdInCoinBank" resultType="int">
        SELECT IFNULL(MAX(id), -1)
        FROM diary
        WHERE member_id = #{memberId} AND coin_bank_id = #{coinBankId};
    </select>
    <!--    월별 다이어리 마지막 id 조회 -->
    <select id="selectLastIdInMonth" resultType="int">
        SELECT IFNULL(MAX(id), -1)
        FROM diary
        WHERE member_id = #{memberId} AND DATE_FORMAT(write_date, '%Y-%m') = DATE_FORMAT(#{writeDate}, '%Y-%m')
    </select>
    <!--    날짜별 다이어리 마지막 id 조회-->
    <select id="selectDailyLastId" resultType="int">
        SELECT IFNULL(MAX(id), -1)
        FROM top_diary_daily
        WHERE DATE_FORMAT(write_date, '%Y-%m-%d') = DATE_FORMAT(#{writeDate}, '%Y-%m-%d')
    </select>
    <!--    오늘의 TOP 다이어리 마지막 id 조회-->
    <select id="selectTodayLastId" resultType="int">
        SELECT IFNULL(MAX(id), -1)
        FROM top_diary_today
    </select>

    <!--    임시 다이어리 마지막 id 조회 -->
    <select id="selectInterimLastId" resultType="int">
        SELECT IFNULL(MAX(id), -1)
        FROM interim_diary
        WHERE member_id = #{memberId};
    </select>
    <!--    임시 다이어리에 해당 파일 있는지 확인-->
    <select id="checkFileInInterimDiary" resultType="int">
        SELECT COUNT(*)
        FROM interim_diary_file
        WHERE diary_id = #{diaryId} AND file_id = #{fileId}
    </select>
    <!--    임시 다이어리 존재 여부 확인 -->
    <select id="checkInterimDiaryId" resultType="int">
        SELECT COUNT(*)
        FROM interim_diary
        WHERE id = #{diaryId};
    </select>
    <!--    임시 다이어리 작성자 확인 -->
    <select id="checkInterimDiaryMemberId" resultType="int">
        SELECT COUNT(*)
        FROM interim_diary
        WHERE id = #{diaryId} AND member_id = #{memberId}
    </select>


    <!-- 다이어리 저장 및 id 값 조회-->
    <select id="insertDiary" statementType="CALLABLE" parameterType="DiaryDTO" resultType="DiaryVO" resultMap="DiaryDetail">
        { CALL INSERT_DIARY( #{memberId}, #{title}, #{content}, #{isPublic}, #{angryPhaseId}, #{coinBankId} ) }
    </select>
    <insert id="insertDiaryFile">
        INSERT INTO diary_file(diary_id, file_id, file_no) VALUES( #{diaryId}, #{fileId}, #{fileNo} )
    </insert>



    <!-- 다이어리 목록 조회 (저금통별) -->
    <select id="selectDiaryListInCoinBank" resultType="DiaryVO" resultMap="DiaryDetail">
        SELECT id AS diary_id, member_id, is_deleted, diary_no, title, content, DATE(write_date) AS write_date, coin_bank_id, angry_phase_id, is_public, todack_count, view_count
        FROM diary
        WHERE member_id = #{memberId} AND coin_bank_id = #{coinBankId} AND id <![CDATA[<]]> #{lastDiaryId}
        ORDER BY id DESC
        LIMIT #{size}
    </select>

    <!-- 다이어리 목록 조회 (연도 + 월별) -->
    <select id="selectDiaryListInMonth" resultType="DiaryVO" resultMap="DiaryDetail">
        SELECT id AS diary_id, member_id, is_deleted, diary_no, title, content, DATE(write_date) AS write_date, angry_phase_id, is_public, todack_count, view_count
        FROM diary
        WHERE member_id = #{memberId} AND DATE_FORMAT(write_date, '%Y-%m') = DATE_FORMAT(#{writeDate}, '%Y-%m') AND id <![CDATA[<]]> #{lastDiaryId}
        ORDER BY id DESC
        LIMIT #{size}
    </select>
<!--    날짜별 TOP 분노글 -->
    <resultMap id="selectDailyListResultMap" type="DiaryVO">
        <result property="dailyTopId" javaType="int" column="tdd_id" jdbcType="INTEGER" />
        <result property="id" javaType="int" column="d_id" jdbcType="INTEGER" />
        <result property="memberId" javaType="int" column="member_id" jdbcType="INTEGER" />
        <result property="isDeleted" javaType="boolean" column="is_deleted" jdbcType="TINYINT" />
        <result property="diaryNo" javaType="int" column="diary_no" jdbcType="INTEGER" />
        <result property="title" javaType="string" column="title" jdbcType="VARCHAR"/>
        <result property="content" javaType="string" column="content" jdbcType="VARCHAR" />
        <result property="dateTime" javaType="string" column="write_date" jdbcType="TIMESTAMP" />
        <result property="angryPhaseId" javaType="int" column="angry_phase_id" jdbcType="INTEGER" />
        <result property="isPublic" javaType="boolean" column="is_public" jdbcType="TINYINT" />
        <result property="todackCount" javaType="int" column="todack_count" jdbcType="INTEGER" />
        <result property="viewCount" javaType="int" column="view_count" jdbcType="INTEGER" />
    </resultMap>
    <select id="selectDailyTop" resultType="DiaryVO" resultMap="selectDailyListResultMap">
        SELECT tdd.id AS tdd_id, d.id AS d_id, member_id, is_deleted, diary_no, title, content, DATE(d.write_date) AS write_date, angry_phase_id, is_public, todack_count, view_count
        FROM top_diary_daily AS tdd
            LEFT JOIN diary AS d
                ON tdd.diary_id = d.id
        WHERE DATE_FORMAT(d.write_date, '%Y-%m-%d') = DATE_FORMAT(#{writeDate}, '%Y-%m-%d') AND is_public = 1 AND tdd.id <![CDATA[>]]> #{lastDiaryId}
        ORDER BY tdd.id
        LIMIT #{size}
    </select>
<!--    오늘의 TOP 분노글-->
        <resultMap id="selectTodayListResultMap" type="DiaryVO">
            <result property="todayTopId" javaType="int" column="tdt_id" jdbcType="INTEGER" />
            <result property="id" javaType="int" column="d_id" jdbcType="INTEGER" />
            <result property="memberId" javaType="int" column="member_id" jdbcType="INTEGER" />
            <result property="isDeleted" javaType="boolean" column="is_deleted" jdbcType="TINYINT" />
            <result property="diaryNo" javaType="int" column="diary_no" jdbcType="INTEGER" />
            <result property="title" javaType="string" column="title" jdbcType="VARCHAR"/>
            <result property="content" javaType="string" column="content" jdbcType="VARCHAR" />
            <result property="dateTime" javaType="string" column="write_date" jdbcType="TIMESTAMP" />
            <result property="angryPhaseId" javaType="int" column="angry_phase_id" jdbcType="INTEGER" />
            <result property="isPublic" javaType="boolean" column="is_public" jdbcType="TINYINT" />
            <result property="todackCount" javaType="int" column="todack_count" jdbcType="INTEGER" />
            <result property="viewCount" javaType="int" column="view_count" jdbcType="INTEGER" />
        </resultMap>
    <select id="selectTodayTop" resultType="DiaryVO" resultMap="selectTodayListResultMap">
        SELECT tdt.id AS tdt_id, d.id AS d_id, d.member_id AS member_id, d.is_deleted, d.title, d.content, DATE(d.write_date) AS write_date, d.angry_phase_id, d.todack_count, d.view_count
        FROM top_diary_today AS tdt
            LEFT JOIN diary AS d
                ON tdt.diary_id = d.id
        WHERE tdt.id <![CDATA[>]]> #{lastDiaryId}
        ORDER BY tdt.id
        LIMIT #{size};

    </select>
    <!--    대나무숲 -->
    <select id="bambooGrove" resultType="DiaryVO" >
        SELECT id, member_id, is_deleted, diary_no, title, write_date, angry_phase_id, todack_count, view_count
        FROM diary
        WHERE id <![CDATA[<]]> #{lastDiaryId} AND is_public = 1 AND ${filter}
        ORDER BY id DESC
        LIMIT #{size}
    </select>

    <select id="bambooTest" resultType = "DiaryVO">
        SELECT id
        FROM diary
        WHERE ${test}
    </select>

<!-- 다이어리 상세 조회 -->
    <resultMap id="DiaryDetail" type="diaryVO">
        <result property="id" javaType="int" column="diary_id" jdbcType="INTEGER" />
        <result property="memberId" javaType="int" column="member_id" jdbcType="INTEGER" />
        <result property="isDeleted" javaType="boolean" column="is_deleted" jdbcType="TINYINT" />
        <result property="diaryNo" javaType="int" column="diary_no" jdbcType="INTEGER" />
        <result property="title" javaType="string" column="title" jdbcType="VARCHAR" />
        <result property="content" javaType="string" column="content" jdbcType="VARCHAR" />
        <result property="dateTime" javaType="string" column="write_date" jdbcType="TIMESTAMP" />
        <result property="coinBankId" javaType="int" column="coin_bank_id" jdbcType="INTEGER" />
        <result property="angryPhaseId" javaType="int" column="angry_phase_id" jdbcType="INTEGER" />
        <result property="isPublic" javaType="boolean" column="is_public" jdbcType="TINYINT" />
        <result property="todackCount" javaType="int" column="todack_count" jdbcType="INTEGER" />
        <result property="viewCount" javaType="int" column="view_count" jdbcType="INTEGER" />
    </resultMap>

    <resultMap id="DiaryFileDetail" type="DiaryFileVO">
        <result property="id" javaType="int" column="id" jdbcType="INTEGER" />
        <result property="systemFileName" javaType="string" column="system_file_name" jdbcType="VARCHAR" />
        <result property="fileNo" javaType="int" column="file_no" jdbcType="INTEGER" />
    </resultMap>

<!--    다이어리 내용 조회 -->
    <select id="selectDiaryDetail" resultType="DiaryVO" resultMap="DiaryDetail">
        SELECT id AS diary_id, member_id, is_deleted, diary_no, title, content, write_date, coin_bank_id, angry_phase_id, is_public, todack_count, view_count
        FROM diary
        WHERE id = #{diaryId}
    </select>

<!--    다이어리 별 파일 조회-->
    <select id="selectFileInDiary" resultType="DiaryFileVO" resultMap="DiaryFileDetail">
        SELECT f.id, f.system_file_name, df.file_no
        FROM diary_file AS df
                 LEFT JOIN file AS f
                           ON df.file_id = f.id
        WHERE df.diary_id = #{diaryId}
        ORDER BY df.file_no
    </select>

<!--    다이어리 조회 시 조회수 업데이트-->
    <update id="updateViewCount" >
        UPDATE diary SET view_count = view_count + 1 WHERE id = #{diaryId}
    </update>

<!--    다이어리 삭제 -->
    <delete id="deleteDiary">
        { CALL DELETE_DIARY( #{diaryId}, #{memberId} ) }
    </delete>

    <update id="updateDiary" parameterType="DiaryDTO">
        UPDATE diary SET title = #{title}, content = #{content}, is_public = #{isPublic}, angry_phase_id = #{angryPhaseId}
        WHERE id = #{id}
    </update>
    <delete id="deleteFileInDiary" >
        { CALL DELETE_FILE_IN_DIARY( #{fileId} )  }
    </delete>
    <select id="selectMaxFileNo" resultType="int">
        SELECT IFNULL(MAX(df.file_no), 0)
        FROM diary AS d
             RIGHT JOIN diary_file AS df
                    ON d.id = df.diary_id
             LEFT JOIN file AS f
                   ON df.file_id = f.id
        WHERE d.id = #{diaryId};
    </select>

<!--    임시 다이어리 저장 및 id 조회 -->
    <select id="insertInterimDiary" parameterType="interimDiaryDTO" statementType="CALLABLE" resultType="int" >
        { CALL INSERT_INTERIM_DIARY( #{memberId}, #{title}, #{content}, #{isPublic}, #{angryPhaseId} ) }
    </select>
    <insert id="insertInterimDiaryFile">
        INSERT INTO interim_diary_file(diary_id, file_id, file_no) VALUES( #{diaryId}, #{fileId}, #{fileNo} )
    </insert>
<!--    임시 다이어리 상세 조회-->
    <resultMap id="interimDiaryDetail" type="interimDiaryVO">
        <result property="id" javaType="int" column="id" jdbcType="INTEGER" />
        <result property="memberId" javaType="int" column="member_id" jdbcType="INTEGER" />
        <result property="title" javaType="string" column="title" jdbcType="VARCHAR" />
        <result property="content" javaType="string" column="content" jdbcType="VARCHAR" />
        <result property="dateTime" javaType="string" column="write_date" jdbcType="TIMESTAMP" />
        <result property="isPublic" javaType="boolean" column="is_public" jdbcType="TINYINT" />
        <result property="angryPhaseId" javaType="int" column="angry_phase_id" jdbcType="INTEGER" />
    </resultMap>

<!--    임시 다이어리 내용 조회 -->
    <select id="selectInterimDiaryDetail" resultType="InterimDiaryVO" resultMap="interimDiaryDetail">
        SELECT id, member_id, title, content, write_date, angry_phase_id, is_public
        FROM interim_diary
        WHERE id = #{diaryId};
    </select>

<!--    임시 다이어리 내 파일 조회-->
    <select id="selectFileInInterimDiary" resultType="DiaryFileVO" resultMap="DiaryFileDetail">
        SELECT f.id, f.system_file_name, df.file_no
        FROM interim_file AS f
                 LEFT JOIN interim_diary_file AS df
                           ON df.file_id = f.id
        WHERE df.diary_id = #{diaryId}
        ORDER BY df.file_no;
    </select>



<!--    임시 다이어리 목록 조회 -->
    <select id="selectInterimDiaryList" resultType="InterimDiaryVO" >
        SELECT id, member_id, title, content, DATE(write_date) AS dateTime, angry_phase_id, is_public
        FROM interim_diary
        WHERE member_id = #{memberId} AND id <![CDATA[<]]> #{lastDiaryId}
        ORDER BY id DESC
        LIMIT #{size};
    </select>

<!--    임시 다이어리 개수 조회-->
    <select id="countInterimDiary" resultType="int" >
        SELECT COUNT(*) FROM interim_diary WHERE member_id = #{memberId}
    </select>

<!--    임시 다이어리 삭제-->
    <select id="selectFileIdInInterimDiary" resultType="int">
        SELECT IFNULL(file_id, 0) AS file_id
        FROM interim_diary AS d
                 LEFT OUTER JOIN(
            SELECT diary_id, file_id
            FROM interim_diary_file
            WHERE diary_id = #{diaryId}
        ) AS df ON (d.id = df.diary_id)
    </select>
    <delete id="deleteInterimDiary" statementType="CALLABLE">
        { CALL DELETE_INTERIM_DIARY( #{diaryId} ) }
    </delete>
    <delete id="deleteInterimFile" >
        DELETE FROM interim_file WHERE id = #{fileId}
    </delete>

    <!--    임시 다이어리 수정 -->
    <update id="updateInterimDiary" parameterType="interimDiaryDTO">
        UPDATE interim_diary SET title = #{title}, content = #{content}, is_public = #{isPublic}, angry_phase_id = #{angryPhaseId}
        WHERE id = #{id}
    </update>
    <delete id="deleteFileInInterimDiary" >
        { CALL DELETE_FILE_IN_INTERIM_DIARY( #{fileId} )  }
    </delete>
    <select id="selectMaxInterimFileNo" resultType="int">
        SELECT IFNULL(MAX(df.file_no), 0)
        FROM interim_diary AS d
                 RIGHT JOIN interim_diary_file AS df
                            ON d.id = df.diary_id
                 LEFT JOIN interim_file AS f
                           ON df.file_id = f.id
        WHERE d.id = #{diaryId};
    </select>

    <!--    저금통 별 다이어리 개수 -->
    <select id="selectDiaryCountInCoinBank" resultType="int">
        SELECT IFNULL(COUNT(*), 0)
        FROM diary
        WHERE coin_bank_id = #{coinBankId} AND member_id = #{memberId};
    </select>

<!--    저금통 별 토댝 총 개수 -->
    <select id="selectTodackCountInCoinBank" resultType="int">
        SELECT IFNULL(SUM(todack_count), 0)
        FROM diary
        WHERE coin_bank_id = #{coinBankId} AND member_id = #{memberId};
    </select>


    <select id="searchDiary" resultType="DiaryVO">
        SELECT id, member_id, diary_no, title, write_date, angry_phase_id, todack_count, view_count
        FROM diary
        WHERE is_public = 1 AND (title LIKE CONCAT('%', #{searchKeyword}, '%') OR content LIKE CONCAT('%', #{searchKeyword}, '%')) AND id <![CDATA[<]]> #{lastDiaryId}
        ORDER BY id desc
        LIMIT #{size}
    </select>

    <select id = "selectGalleryLastId" resultType = "int">
        SELECT diary_id
        FROM diary_file
        GROUP BY diary_id
        ORDER BY diary_id DESC limit 1;
    </select>

    <select id = "selectGallery" resultType="GalleryDiaryVO">
        SELECT d.id, title, todack_count, CONCAT('/images/', f.system_file_name) as file
        FROM diary as d
                 inner join (SELECT diary_id, min(file_id) as file_id from diary_file group by diary_id) as df
                            ON d.id = df.diary_id
                 inner join file as f
                            ON df.file_id = f.id
        WHERE d.id <![CDATA[<]]> #{lastDiaryId} AND is_public = 1
        ORDER BY d.id DESC
        LIMIT #{size}
    </select>

    <select id="checkDiary" resultMap="DiaryDetail">
        SELECT id AS diary_id, member_id, is_deleted, is_public
        FROM diary
        WHERE id = #{diaryId}
    </select>

</mapper>